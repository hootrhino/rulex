version: "3.1"
# Network
networks:
  subnet_net:
    ipam:
      config:
        - subnet: 192.168.1.0/24
    driver: bridge
# Services
services:
  minio:
    image: minio/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - ~/docker/subnet/minio_storage:/data
    environment:
      MINIO_ROOT_USER: masoud
      MINIO_ROOT_PASSWORD: Strong#Pass#2022
    command: server --console-address ":9001" /data

  tdengine:
    image: registry.cn-qingdao.aliyuncs.com/ithings-open/ithings-open:tdengine-tdengine-3.0.4.2
    container_name: tdengine
    hostname: tdengine
    ports:
      - "6030:6030"
      - "6035:6035"
      - "6041:6041"
      - "6030-6040:6030-6040/udp"
    restart: always
    tty: true
    logging:
      options:
        max-size: "50M"
        max-file: "10"
      driver: json-file
    networks:
      subnet_net:
        aliases:
          - subnet.tdengine.io

  mongo:
    image: mongo:4.4.1
    hostname: subnet.mongo.io
    container_name: subnet_mongo
    ports:
      - "57017:27017"
    restart: always
    command: --bind_ip 0.0.0.0
    volumes:
      - ~/docker/subnet/mongo:/data/db
      - ~/docker/subnet/mongo-entrypoint/:/docker-entrypoint-initdb.d/
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
    networks:
      subnet_net:
        aliases:
          - subnet.mongo.io

  questdb:
    image: questdb/questdb:7.3.1
    hostname: subnet.questdb.io
    container_name: subnet_questdb
    ports:
      - "9009:9009"
      - "8812:8812"
      - "9003:9003"
    restart: always
    volumes:
      - ~/docker/subnet/questdb:/var/lib/questdb
    networks:
      subnet_net:
        aliases:
          - subnet.questdb.io
  # Redis
  redis:
    image: redis:6.0
    hostname: subnet.redis.io
    container_name: subnet_redis
    command: redis-server --requirepass root --appendonly yes
    ports:
      - "56379:6379"
    volumes:
      - ~/docker/subnet/redis/data:/data
    restart: always
    networks:
      subnet_net:
        aliases:
          - subnet.redis.io

  # Emqx
  emqx1:
    image: emqx:5.1.3
    container_name: emqx1
    environment:
      - "EMQX_NODE_NAME=emqx@node1.emqx.io"
      - "EMQX_CLUSTER__DISCOVERY_STRATEGY=static"
      - "EMQX_CLUSTER__STATIC__SEEDS=[emqx@node1.emqx.io,emqx@node2.emqx.io]"
    healthcheck:
      test: ["CMD", "/opt/emqx/bin/emqx", "ctl", "status"]
      interval: 5s
      timeout: 25s
      retries: 5
    networks:
      subnet_net:
        aliases:
          - node1.emqx.io
    ports:
      - 1883:1883
      - 8083:8083
      - 8084:8084
      - 8883:8883
      - 18083:18083
    # volumes:
    #   - $PWD/emqx1_data:/opt/emqx/data

  emqx2:
    image: emqx:5.1.3
    container_name: emqx2
    environment:
      - "EMQX_NODE_NAME=emqx@node2.emqx.io"
      - "EMQX_CLUSTER__DISCOVERY_STRATEGY=static"
      - "EMQX_CLUSTER__STATIC__SEEDS=[emqx@node1.emqx.io,emqx@node2.emqx.io]"
    healthcheck:
      test: ["CMD", "/opt/emqx/bin/emqx", "ctl", "status"]
      interval: 5s
      timeout: 25s
      retries: 5
    networks:
      subnet_net:
        aliases:
          - node2.emqx.io
    # volumes:
    #   - $PWD/emqx2_data:/opt/emqx/data
